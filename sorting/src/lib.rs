//! Sorting test environment

use std::fmt::Debug;

mod b_rand;

/// simple optimization to quit earlier and not include largest elements, but worst case still O(n^2)
pub fn bubble_sort<T: PartialOrd + Debug>(v: &mut [T]) {
    for p in 0..v.len() {
        let mut sorted = true;
        for i in 0..(v.len() - 1) - p {
            if v[i] > v[i + 1] {
                v.swap(i, i + 1);
                sorted = false;
            }
        }
        println!("{:?}", v);
        if sorted {
            return;
        };
    }
}

/// O(n * ln(n)) time and space
pub fn merge_sort<T: PartialOrd + Debug>(mut v: Vec<T>) -> Vec<T> {
    // sort left  O(n * ln(n))
    // sort right O(n * ln(n))
    // merge O(n)

    println!("{:?}", v);
    if v.len() <= 1 {
        return v;
    }
    let mut res = Vec::with_capacity(v.len());
    let right = v.split_off(v.len() / 2);
    let left = merge_sort(v);
    let right = merge_sort(right);

    // Merging
    let mut left_iter = left.into_iter();
    let mut right_iter = right.into_iter();
    let mut left_peek = left_iter.next();
    let mut right_peek = right_iter.next();

    loop {
        match left_peek {
            Some(ref left_val) => match right_peek {
                Some(ref right_val) => {
                    if right_val < left_val {
                        res.push(right_peek.take().unwrap());
                        right_peek = right_iter.next();
                    } else {
                        res.push(left_peek.take().unwrap());
                        left_peek = left_iter.next();
                    }
                }
                None => {
                    res.push(left_peek.take().unwrap());
                    res.extend(left_iter);
                    return res;
                }
            },
            None => {
                if let Some(right_val) = right_peek {
                    res.push(right_val);
                }
                res.extend(right_iter);
                return res;
            }
        }
    }
}

/// Gets the pivot location
pub fn pivot<T: PartialOrd>(v: &mut [T]) -> usize {
    let mut p = b_rand::rand(v.len());
    v.swap(p, 0);
    p = 0;
    for i in 1..v.len() {
        if v[i] < v[p] {
            v.swap(p + 1, i);
            v.swap(p, p + 1);
            p += 1;
        }
    }
    p
}

/// quicksort in place
pub fn quick_sort<T: PartialOrd + Debug + Send>(v: &mut [T]) {
    if v.len() <= 1 {
        return;
    }
    let p = pivot(v);
    println!("{:?}", v);
    let (left, right) = v.split_at_mut(p);
    quick_sort(left);
    quick_sort(&mut right[1..]); // Middle element already sorted
}

struct RawSend<T>(*mut [T]);

unsafe impl<T> Send for RawSend<T> {}

/// threaded quicksort
pub fn threaded_quick_sort<T: 'static + PartialOrd + Debug>(v: &mut [T]) {
    if v.len() <= 1 {
        return;
    }
    let p = pivot(v);
    println!("{:?}", v);
    let (left, right) = v.split_at_mut(p);

    let raw_left_ptr: *mut [T] = left as *mut [T];
    let raw_left_send = RawSend(raw_left_ptr);

    unsafe {
        let handle = std::thread::spawn(move || threaded_quick_sort(&mut *raw_left_send.0));
        threaded_quick_sort(&mut right[1..]); // Middle element already sorted
        handle.join().ok();
    }
}

pub fn rayon_quick_sort<T: PartialOrd + Debug + Send>(v: &mut [T]) {
    if v.len() <= 1 {
        return;
    }
    let p = pivot(v);
    println!("{:?}", v);
    let (left, right) = v.split_at_mut(p);
    rayon::join(|| rayon_quick_sort(left), || rayon_quick_sort(&mut right[1..]));
}

#[cfg(test)]
mod tests {
    use super::*;
    const BIG_TEST_RES: [i32; 2001] = [
        -1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988, -987, -986,
        -985, -984, -983, -982, -981, -980, -979, -978, -977, -976, -975, -974, -973, -972, -971,
        -970, -969, -968, -967, -966, -965, -964, -963, -962, -961, -960, -959, -958, -957, -956,
        -955, -954, -953, -952, -951, -950, -949, -948, -947, -946, -945, -944, -943, -942, -941,
        -940, -939, -938, -937, -936, -935, -934, -933, -932, -931, -930, -929, -928, -927, -926,
        -925, -924, -923, -922, -921, -920, -919, -918, -917, -916, -915, -914, -913, -912, -911,
        -910, -909, -908, -907, -906, -905, -904, -903, -902, -901, -900, -899, -898, -897, -896,
        -895, -894, -893, -892, -891, -890, -889, -888, -887, -886, -885, -884, -883, -882, -881,
        -880, -879, -878, -877, -876, -875, -874, -873, -872, -871, -870, -869, -868, -867, -866,
        -865, -864, -863, -862, -861, -860, -859, -858, -857, -856, -855, -854, -853, -852, -851,
        -850, -849, -848, -847, -846, -845, -844, -843, -842, -841, -840, -839, -838, -837, -836,
        -835, -834, -833, -832, -831, -830, -829, -828, -827, -826, -825, -824, -823, -822, -821,
        -820, -819, -818, -817, -816, -815, -814, -813, -812, -811, -810, -809, -808, -807, -806,
        -805, -804, -803, -802, -801, -800, -799, -798, -797, -796, -795, -794, -793, -792, -791,
        -790, -789, -788, -787, -786, -785, -784, -783, -782, -781, -780, -779, -778, -777, -776,
        -775, -774, -773, -772, -771, -770, -769, -768, -767, -766, -765, -764, -763, -762, -761,
        -760, -759, -758, -757, -756, -755, -754, -753, -752, -751, -750, -749, -748, -747, -746,
        -745, -744, -743, -742, -741, -740, -739, -738, -737, -736, -735, -734, -733, -732, -731,
        -730, -729, -728, -727, -726, -725, -724, -723, -722, -721, -720, -719, -718, -717, -716,
        -715, -714, -713, -712, -711, -710, -709, -708, -707, -706, -705, -704, -703, -702, -701,
        -700, -699, -698, -697, -696, -695, -694, -693, -692, -691, -690, -689, -688, -687, -686,
        -685, -684, -683, -682, -681, -680, -679, -678, -677, -676, -675, -674, -673, -672, -671,
        -670, -669, -668, -667, -666, -665, -664, -663, -662, -661, -660, -659, -658, -657, -656,
        -655, -654, -653, -652, -651, -650, -649, -648, -647, -646, -645, -644, -643, -642, -641,
        -640, -639, -638, -637, -636, -635, -634, -633, -632, -631, -630, -629, -628, -627, -626,
        -625, -624, -623, -622, -621, -620, -619, -618, -617, -616, -615, -614, -613, -612, -611,
        -610, -609, -608, -607, -606, -605, -604, -603, -602, -601, -600, -599, -598, -597, -596,
        -595, -594, -593, -592, -591, -590, -589, -588, -587, -586, -585, -584, -583, -582, -581,
        -580, -579, -578, -577, -576, -575, -574, -573, -572, -571, -570, -569, -568, -567, -566,
        -565, -564, -563, -562, -561, -560, -559, -558, -557, -556, -555, -554, -553, -552, -551,
        -550, -549, -548, -547, -546, -545, -544, -543, -542, -541, -540, -539, -538, -537, -536,
        -535, -534, -533, -532, -531, -530, -529, -528, -527, -526, -525, -524, -523, -522, -521,
        -520, -519, -518, -517, -516, -515, -514, -513, -512, -511, -510, -509, -508, -507, -506,
        -505, -504, -503, -502, -501, -500, -499, -498, -497, -496, -495, -494, -493, -492, -491,
        -490, -489, -488, -487, -486, -485, -484, -483, -482, -481, -480, -479, -478, -477, -476,
        -475, -474, -473, -472, -471, -470, -469, -468, -467, -466, -465, -464, -463, -462, -461,
        -460, -459, -458, -457, -456, -455, -454, -453, -452, -451, -450, -449, -448, -447, -446,
        -445, -444, -443, -442, -441, -440, -439, -438, -437, -436, -435, -434, -433, -432, -431,
        -430, -429, -428, -427, -426, -425, -424, -423, -422, -421, -420, -419, -418, -417, -416,
        -415, -414, -413, -412, -411, -410, -409, -408, -407, -406, -405, -404, -403, -402, -401,
        -400, -399, -398, -397, -396, -395, -394, -393, -392, -391, -390, -389, -388, -387, -386,
        -385, -384, -383, -382, -381, -380, -379, -378, -377, -376, -375, -374, -373, -372, -371,
        -370, -369, -368, -367, -366, -365, -364, -363, -362, -361, -360, -359, -358, -357, -356,
        -355, -354, -353, -352, -351, -350, -349, -348, -347, -346, -345, -344, -343, -342, -341,
        -340, -339, -338, -337, -336, -335, -334, -333, -332, -331, -330, -329, -328, -327, -326,
        -325, -324, -323, -322, -321, -320, -319, -318, -317, -316, -315, -314, -313, -312, -311,
        -310, -309, -308, -307, -306, -305, -304, -303, -302, -301, -300, -299, -298, -297, -296,
        -295, -294, -293, -292, -291, -290, -289, -288, -287, -286, -285, -284, -283, -282, -281,
        -280, -279, -278, -277, -276, -275, -274, -273, -272, -271, -270, -269, -268, -267, -266,
        -265, -264, -263, -262, -261, -260, -259, -258, -257, -256, -255, -254, -253, -252, -251,
        -250, -249, -248, -247, -246, -245, -244, -243, -242, -241, -240, -239, -238, -237, -236,
        -235, -234, -233, -232, -231, -230, -229, -228, -227, -226, -225, -224, -223, -222, -221,
        -220, -219, -218, -217, -216, -215, -214, -213, -212, -211, -210, -209, -208, -207, -206,
        -205, -204, -203, -202, -201, -200, -199, -198, -197, -196, -195, -194, -193, -192, -191,
        -190, -189, -188, -187, -186, -185, -184, -183, -182, -181, -180, -179, -178, -177, -176,
        -175, -174, -173, -172, -171, -170, -169, -168, -167, -166, -165, -164, -163, -162, -161,
        -160, -159, -158, -157, -156, -155, -154, -153, -152, -151, -150, -149, -148, -147, -146,
        -145, -144, -143, -142, -141, -140, -139, -138, -137, -136, -135, -134, -133, -132, -131,
        -130, -129, -128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116,
        -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101,
        -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83,
        -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65,
        -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47,
        -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29,
        -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11,
        -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
        84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
        105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
        123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
        141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
        159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
        177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
        213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
        231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
        249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
        267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
        285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
        303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
        321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
        339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
        357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
        375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
        393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
        411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
        429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
        447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
        465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482,
        483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
        519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
        537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
        555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
        573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
        591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
        609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
        627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
        645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
        663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
        681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
        699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
        717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
        735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
        753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
        771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
        789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
        807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
        825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
        843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
        861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
        879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
        897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
        915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
        933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
        951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
        969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
        987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
    ];
    const BIG_TEST: [i32; 2001] = [
        -763, 609, -644, -460, 992, -907, -933, -439, 166, 231, -994, -49, 560, 634, 691, -971,
        -206, -893, 322, -724, -667, -316, 225, -899, -892, 749, 259, -544, -517, 555, -293, 192,
        110, 672, 877, 552, -612, 589, 111, -583, 340, -627, -512, -50, 371, 416, 906, -24, -919,
        572, 131, -154, 404, 101, -707, -992, 364, 381, -260, -348, 998, 16, 804, 857, -352, -133,
        -252, -876, -515, 709, 431, 841, -706, -463, -324, 601, -145, -871, -170, -633, -193, 328,
        -587, 679, 694, 641, 897, -224, -786, -106, -349, -878, 796, 642, 972, 628, -925, 526,
        -613, -221, 168, -413, 78, 780, -426, -841, 854, 832, 687, -943, 301, -658, 807, 422, 928,
        -595, 882, 36, -974, 777, -561, 728, 751, 497, 268, -54, -603, 425, -4, -849, 319, 460,
        242, 275, 561, -91, 743, 126, 965, 69, 853, 423, -29, 514, 833, 227, 153, 588, -282, -355,
        230, -639, -235, 194, -691, -444, -184, 156, -255, -2, -41, 659, -188, -772, 504, 632, 554,
        56, 187, 279, 792, -408, 915, -552, 14, -234, 52, 815, -86, 349, -303, 624, 720, 103, 57,
        -14, -976, 505, -694, 85, 893, 100, -271, 519, 731, 107, -747, 354, 426, -572, -242, 684,
        -236, 656, -928, -110, 520, 657, 663, 292, 332, -125, -967, 62, 285, -716, -521, 563, -8,
        -353, 185, -550, -705, -276, 803, -476, 876, 385, 498, 598, -764, -128, 263, -311, -35, 26,
        -32, -711, 198, 299, -664, -867, -65, -34, 789, -858, -621, -914, 70, -442, -932, 297,
        -461, -486, 822, -607, -740, -640, -944, 594, 315, -31, 981, -887, 685, 44, -840, 7, 155,
        695, -7, -682, 137, 637, -983, -628, -683, 603, 719, -336, -709, 760, 51, -551, 920, 81,
        -465, -608, -804, 454, 551, -861, -308, -117, -584, -422, -555, -700, 415, -855, 104, -950,
        490, 182, 41, 615, 308, -668, -436, -298, -739, -495, -373, -169, -259, -520, -936, 84,
        -88, -317, 217, -475, 264, 446, -999, 341, 239, -859, -332, 435, -900, 654, -712, -954,
        772, -835, 507, -590, 214, 613, 568, 912, 844, -384, -631, 283, 714, -267, -885, -300, 602,
        487, -278, 726, -207, 557, 502, 405, -285, -304, -742, 480, -996, 671, 596, -782, -741,
        -746, 871, 280, -197, 746, 440, 462, -360, 204, -977, 980, 132, -830, -217, 167, 5, 676,
        -435, -920, 533, 212, -115, -904, -406, -479, 636, -898, 4, -17, -624, -879, 149, 206, -85,
        604, 597, -796, -99, -545, 108, -433, -372, -547, 855, 417, -443, -912, -379, -335, -130,
        -323, -354, 527, 379, -818, 66, -171, -305, -146, -404, 990, -39, 190, 575, 313, -689,
        -935, -828, 750, -569, -753, -575, -307, -641, -182, -287, 899, 234, -789, 647, 528, 459,
        -592, -793, 884, -77, -986, -533, -847, -703, 975, 982, -263, -833, 945, -489, 666, 947,
        -737, -931, 635, -605, -754, 266, -361, 250, -223, 710, -40, -951, -139, 974, 471, 58, 176,
        222, 115, 492, -798, 827, 79, -12, -415, 736, -729, 983, -23, -779, -972, 629, -410, 262,
        147, -87, 139, -926, -45, 971, -757, 869, -118, -281, 522, 305, -937, 958, -690, -672,
        -687, 74, 401, 180, -437, 680, 880, -896, -239, -848, -227, 256, -164, 779, -962, 595,
        -911, 360, 376, -320, 686, 366, -334, 987, -414, -956, -862, -341, 413, -516, -374, -768,
        821, 302, 509, -21, 916, -827, 98, -449, 862, 122, -762, -698, -693, -244, 894, 140, 940,
        -663, 205, 133, -208, 668, -496, -481, 785, 578, 769, -270, 355, 467, -189, 973, 326, 999,
        -409, 15, 648, 67, -451, 251, 961, 179, -803, 767, -688, 419, -557, 276, -985, -126, -114,
        543, -778, 432, 730, -322, -573, -843, 875, 836, -692, 735, 644, 105, 903, 905, 883, -697,
        -890, -250, -677, -232, 524, 223, 558, 646, -472, -491, -701, -527, -431, -380, -211, 392,
        -922, -405, 986, -543, -817, -10, 964, 713, 410, -765, 117, -593, -196, -781, 306, -562,
        -30, -214, -363, -969, -930, -616, -134, 260, -238, -325, -83, -654, 734, 64, 395, -819,
        966, -280, 495, 152, -589, -9, 655, -178, -143, -181, 269, -567, 829, -704, 165, -553, 255,
        -523, 689, -350, 756, 304, -142, 851, -59, -514, -938, -70, 600, 901, 356, -699, -394,
        -748, -769, 948, -147, 935, -845, -162, 571, 359, -160, 362, -632, -388, -119, -38, -822,
        -802, -901, -947, 532, -120, -302, -156, -202, -564, 298, -934, 515, -347, 545, -340, 810,
        -26, -767, 942, 988, -537, 808, -810, 801, 215, 481, 443, -790, 163, -777, -894, 567, -359,
        -457, 650, -837, 2, 386, -121, 499, 324, 593, 488, 908, -611, -816, 993, 570, 907, -558,
        703, -978, -625, 824, 936, -949, -389, 950, 141, -135, 421, -272, 738, -883, -814, -381,
        895, 363, 873, -556, 677, 536, -163, -269, -228, -860, 627, 566, 698, 842, 759, 327, 477,
        658, -756, 510, -927, -548, -854, 407, 368, 177, -535, 451, -984, -634, 229, 619, 357, 226,
        233, -680, 25, 802, 786, 411, -222, 957, -902, 43, 911, -321, -673, -743, 922, -421, -395,
        -554, 75, 414, -538, -570, -580, -454, -328, 91, -483, 996, -203, -253, 474, 838, -626,
        -714, 150, -708, 482, 997, 172, -482, 850, -820, 885, 549, 621, 129, 207, 909, 732, 711,
        -669, -909, -177, 496, 690, -915, 814, 929, 868, 758, -6, -857, -329, 757, -93, 673, 119,
        -676, -601, -579, -342, 437, -338, -129, 754, 683, 995, -290, -296, 977, -542, -661, 48,
        61, 737, 344, -488, -726, -751, -806, 193, -824, 890, 29, -137, 148, -446, 116, -657, -566,
        960, -815, -713, -132, 428, -662, -377, 38, 34, -398, 617, -73, -3, -76, -468, 930, -327,
        -57, -157, -799, 667, 27, -591, 161, -615, -366, -213, 819, -531, 448, -785, -469, -246,
        -104, 175, 591, 329, 729, -773, -678, 485, -493, 438, 699, -113, -643, 867, 83, -652, 294,
        -852, 350, 620, -963, -168, -923, 949, -998, -825, 503, 518, 352, 345, -390, 773, 649,
        -649, 312, 430, 287, 781, 40, 125, 400, 453, 927, -844, -312, 90, -719, -344, 959, 377,
        978, -274, 923, -265, 639, 861, -576, -261, 805, -715, -109, 55, -266, 846, -568, -75, 334,
        173, -952, -427, -275, -447, 494, 820, 63, 245, -273, 330, -970, 645, 45, -167, -173, -101,
        0, -758, -82, 542, -100, 576, -659, -499, -874, -455, 92, -441, -473, 706, 770, 835, 538,
        23, 174, -882, -812, 21, -112, 755, 203, -56, 652, -600, 31, 247, -982, 530, 464, -791,
        -980, 818, -294, 336, -368, -429, 707, -610, 891, 390, 887, -755, -924, -539, -19, 196,
        -330, 716, 32, 696, -418, 765, -618, -445, -412, -416, -306, -620, 845, 790, -839, 825,
        -761, 787, -403, 325, -343, 852, -959, 145, -829, -204, 985, -256, 830, -853, 238, -345,
        472, 188, -466, -140, 186, 582, -864, 484, -941, 337, -836, -851, 886, 625, 162, 550, -375,
        -582, -981, -399, -850, 473, 393, -738, 651, 184, 169, 365, -684, 583, 702, -152, 860,
        -958, 943, -313, -175, -766, 476, 195, -153, 408, -67, -856, -11, -731, -419, -629, -525,
        130, -339, -722, -886, 199, 612, -337, 54, 12, -549, -723, 143, -200, 590, 388, -243, 811,
        -988, -284, -411, 201, 295, -249, -71, 450, -563, 6, -604, 501, -136, 970, 369, 372, -749,
        -500, 127, -614, -155, 120, -645, 500, -122, -220, 136, 11, -477, 607, 178, -733, -5, -995,
        461, 210, 952, 409, 670, -942, 49, 508, -346, 813, 318, 742, -784, -794, 228, 456, 358,
        776, 991, -823, 159, 944, 452, 681, -138, -61, -258, 403, -396, -471, 946, 925, 373, 902,
        -309, 733, 483, -560, 661, 427, -393, -369, 793, 834, 80, 630, 585, -807, -172, 171, 351,
        -219, 517, -230, -74, 924, 954, -679, 273, 71, -459, -268, -964, -565, 859, 643, 951, 10,
        216, -522, -787, 154, 274, -906, -251, 640, 721, 700, 221, 470, -286, -241, -577, -69, 918,
        469, -519, 963, 164, -653, 442, -453, 478, 374, -710, -90, -95, 296, -299, 1000, 311, -81,
        -795, -51, 9, 465, 541, -333, 46, -364, 962, -650, 783, -450, 288, -185, 434, -52, 323,
        254, -975, -546, -727, -801, -617, -622, -64, -314, 675, -968, 39, 546, -484, -448, 569,
        387, 817, 17, 933, -462, -821, -973, 932, 95, 320, 665, 724, 121, 316, -212, -28, 333,
        -231, 704, 479, -254, 956, 272, -559, 382, -105, -1, 93, -865, 774, 243, -630, 447, 865,
        534, -868, 331, -991, 812, 343, 718, -357, 463, 581, 778, -581, -921, 209, 265, -571, 771,
        969, 146, -534, -487, -458, -79, 258, 516, 556, -387, 455, 37, 99, 317, 270, 486, -18,
        -291, 257, -226, 375, 123, -695, 290, 506, 346, -63, 559, -720, -326, -198, -55, 828, -797,
        97, -965, 218, -961, -116, 444, 616, -46, 740, 219, 717, 361, 241, 826, -946, -94, 160,
        622, -503, 678, -44, 284, -438, -27, 310, 191, 888, 391, -392, 512, -123, -470, 775, 189,
        -732, 445, 539, -247, -598, -351, -111, -20, 244, 8, -718, 708, 984, 562, -529, 722, 398,
        523, -480, 441, -490, 87, 224, -776, 300, 953, -979, -940, -424, 782, 669, -187, 370, -842,
        809, 282, 144, -913, 914, -502, -279, 82, 347, 753, -376, 13, 378, 76, -736, -367, 633,
        458, 564, -518, 384, -606, 399, -728, -190, 389, -955, 540, 900, 682, -149, 348, -863, 303,
        934, 864, -401, -637, -775, 138, -957, -866, 744, -96, 237, 866, 931, 697, -929, 59, -504,
        748, 586, 715, -528, 200, 406, -997, 135, -800, -506, -386, -873, 577, -180, -53, -948,
        -696, -464, 741, 849, -42, 202, 511, -917, 314, -383, 599, -993, 235, -666, -813, -889,
        -209, 277, 994, -245, -127, 794, -884, -513, 402, -759, 816, -1000, -25, -148, -670, 321,
        847, 433, -540, 197, -665, -780, -432, -642, -507, 968, -832, -636, -987, -191, -150, 335,
        -725, 232, -58, -141, -37, 28, -877, 898, -365, 610, 278, -417, -671, 68, -646, -734, 896,
        544, -385, 626, -505, 531, 380, 286, 236, -744, -881, 761, -526, 118, -745, -331, -295,
        -183, 688, -895, -283, 712, 579, 881, 289, -774, 823, -619, -124, 674, 584, -240, 151, -48,
        529, 261, -702, -47, 157, 858, 874, 94, 73, -103, -16, 904, 72, 574, 338, -574, 466, -783,
        587, -492, 339, 537, 489, -78, 89, -788, -60, 246, 798, -966, -497, 436, -402, -362, 281,
        35, -888, -655, 267, -875, 420, 692, 745, 47, 976, 18, 955, 96, 109, 701, -990, -297, 353,
        -808, 424, -358, -597, -870, 449, 788, -872, -68, -98, 307, 142, 910, -174, -102, -805,
        -201, 727, -578, -356, 491, 705, 784, -717, -371, 213, -730, -166, 548, -440, -288, -903,
        872, -586, 253, -485, -36, -131, 183, -194, -159, -541, -771, -770, -760, 412, 763, 592,
        -186, -277, 795, 102, -257, -834, -72, 660, -430, -750, 53, 457, -501, 799, -511, 383,
        -524, -248, -108, -916, 248, 843, -216, -752, 396, -648, -107, -237, 565, -370, 723, 342,
        -144, 739, 77, 941, -161, 181, -319, 65, 979, -811, -22, -210, -15, 926, -939, 837, -215,
        -674, -908, 113, -809, 938, -831, -407, 631, 863, 20, 468, -638, 623, -635, -289, -378,
        114, -609, -434, -596, -530, 475, -478, -918, 208, -685, 611, -474, -838, -179, 618, 252,
        -165, -467, 521, 878, -176, -62, -585, 220, -869, 128, 30, 106, 19, -945, -233, -588, -425,
        249, -315, 493, 605, -205, -721, 112, -989, 24, -660, -264, -910, -310, 1, -651, -80, 662,
        -494, 513, -428, 839, -13, 394, -218, -66, 937, -456, -423, -391, -686, -846, 889, -602,
        806, -536, 967, 158, -452, 547, 614, 693, 870, 170, -510, 439, 917, 124, -905, -509, -92,
        831, 291, 3, 573, 840, -225, -192, -792, -675, 367, 800, -532, 86, 762, 892, 580, 50, -151,
        939, -420, 60, 913, 608, -43, 211, 271, -826, 989, 293, -292, 535, -647, 919, 747, 921,
        606, 42, -262, -382, 856, 33, -508, 766, -897, 22, -960, -195, -318, 664, 525, -891, -229,
        752, -656, 797, -33, -735, 879, -158, 638, 240, -199, -599, 768, -498, 764, 653, -84, 553,
        418, -301, -880, 397, -594, -97, 88, 848, 309, 791, -397, -953, -623, 134, 429, -400, -89,
        -681, 725,
    ];

    #[test]
    fn test_bubble_sort() {
        let mut v = vec![15, 6, 8, 10, 1, 3, 2, 0, -10, 4, -5];
        bubble_sort(&mut v);
        assert_eq!(v, vec![-10, -5, 0, 1, 2, 3, 4, 6, 8, 10, 15]);
    }

    #[test]
    fn test_bubble_sort_big() {
        let mut v = BIG_TEST.to_vec();
        bubble_sort(&mut v);
        assert_eq!(v, BIG_TEST_RES.to_vec());
    }

    #[test]
    fn test_merge_sort() {
        let mut v = vec![15, 6, 8, 10, 1, 3, 2, 0, -10, 4, -5];
        v = merge_sort(v);
        assert_eq!(v, vec![-10, -5, 0, 1, 2, 3, 4, 6, 8, 10, 15]);
    }

    #[test]
    fn test_merge_sort_big() {
        let mut v = BIG_TEST.to_vec();
        v = merge_sort(v);
        assert_eq!(v, BIG_TEST_RES.to_vec());
    }

    #[test]
    fn test_pivot() {
        let mut v = vec![10, 6, 8, 15, 1, 3, 2, 0, -10, 4, -5];
        let p = pivot(&mut v);
        for x in 0..v.len() {
            assert_eq!(v[x] < v[p], x < p);
        }
    }

    #[test]
    fn test_quick_sort_00() {
        let mut v = vec![15, 6, 8, 10, 1, 3, 2, 0, -10, 4, -5];
        quick_sort(&mut v);
        assert_eq!(v, vec![-10, -5, 0, 1, 2, 3, 4, 6, 8, 10, 15]);
    }

    #[test]
    fn test_quick_sort_01() {
        let mut v = vec![9, 6, 8, 10, 1, 3, 2, 0, -10, 4, -5];
        quick_sort(&mut v);
        assert_eq!(v, vec![-10, -5, 0, 1, 2, 3, 4, 6, 8, 9, 10]);
    }

    #[test]
    fn test_quick_sort_big() {
        let mut v = BIG_TEST.to_vec();
        quick_sort(&mut v);
        assert_eq!(v, BIG_TEST_RES.to_vec());
    }

    #[test]
    fn test_threaded_quick_sort_00() {
        let mut v = vec![15, 6, 8, 10, 1, 3, 2, 0, -10, 4, -5];
        threaded_quick_sort(&mut v);
        assert_eq!(v, vec![-10, -5, 0, 1, 2, 3, 4, 6, 8, 10, 15]);
    }

    #[test]
    fn test_threaded_quick_sort_01() {
        let mut v = vec![9, 6, 8, 10, 1, 3, 2, 0, -10, 4, -5];
        threaded_quick_sort(&mut v);
        assert_eq!(v, vec![-10, -5, 0, 1, 2, 3, 4, 6, 8, 9, 10]);
    }

    #[test]
    fn test_threaded_quick_sort_big() {
        let mut v = BIG_TEST.to_vec();
        threaded_quick_sort(&mut v);
        assert_eq!(v, BIG_TEST_RES.to_vec());
    }
}
